import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as d,c as u,e as n,f as a,d as e,b as h,w as i,a as t}from"./app-AC-DZzaC.js";const m="/assets/images/bertvits/create_new_conda_env_in_pycharm.png",b="/assets/images/bertvits/check_cuda_version_in_cmd.png",g="/assets/images/bertvits/install_pytorch_in_pycharm.png",_="/assets/images/bertvits/download_nltk_dataset_in_python.png",v="/assets/images/bertvits/nltk11004.png",k="/assets/images/bertvits/use_openi_as_mirror.png",f={},y={href:"https://github.com/fishaudio/Bert-VITS2",target:"_blank",rel:"noopener noreferrer"},x={href:"https://space.bilibili.com/163056936",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"本篇文章是基于该项目的使用指南，如果你想要了解更多关于Bert-Vits2的信息，请移步到该项目的Github页面及作者b站空间",-1),q=n("p",null,"非专业，仅为教学朋友如何使用Bert-Vits2，限定条件为Windows系统，使用Pycharm作为IDE，具有Nvidia20系或更新的显卡， 数据集仅限中文，若非此情况请自行解决",-1),V=t('<div class="hint-container warning"><p class="hint-container-title">注意</p><p>@Stardust_减 仍在高强度更新项目，本篇写于2023/12/7，可能过时，请知悉</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>我的显卡是3070，batch-size设的是10，平均约40秒一步</p><p>我朋友16G内存，训练的时候会因为内存不足无法开始</p><p>训练还是租张显卡吧（</p></div><h2 id="_1-安装环境" tabindex="-1"><a class="header-anchor" href="#_1-安装环境" aria-hidden="true">#</a> 1.安装环境</h2><h3 id="_1-1安装conda" tabindex="-1"><a class="header-anchor" href="#_1-1安装conda" aria-hidden="true">#</a> 1.1安装conda</h3>',4),B={href:"https://www.anaconda.com/products/individual",target:"_blank",rel:"noopener noreferrer"},S=t('<h3 id="_1-2创建虚拟环境" tabindex="-1"><a class="header-anchor" href="#_1-2创建虚拟环境" aria-hidden="true">#</a> 1.2创建虚拟环境</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里直接使用Pycharm创建环境，会用其他ide的朋友应该能解决conda环境:)</p><p><s>绝对不是我也只会用pycharm</s></p></div><figure><img src="'+m+'" alt="在Pycharm中创建conda项目" tabindex="0" loading="lazy"><figcaption>在Pycharm中创建conda项目</figcaption></figure><h3 id="_1-3准备cuda并安装pytorch" tabindex="-1"><a class="header-anchor" href="#_1-3准备cuda并安装pytorch" aria-hidden="true">#</a> 1.3准备cuda并安装pytorch</h3><p>首先检查你有没有Nvidia显卡</p><h4 id="_1-3-1检查显卡" tabindex="-1"><a class="header-anchor" href="#_1-3-1检查显卡" aria-hidden="true">#</a> 1.3.1检查显卡</h4><p>更新显卡驱动，启动终端或powershell，输入<code>nvidia-smi</code>查看驱动对应的cuda最高版本cuda版本 <img src="'+b+'" alt="使用nvidia-smi查看cuda版本" title="使用nvidia-smi查看cuda版本" loading="lazy"></p>',7),T={href:"https://developer.nvidia.com/cuda-toolkit-archive",target:"_blank",rel:"noopener noreferrer"},I={href:"https://blog.csdn.net/qq_44111805/article/details/128281503",target:"_blank",rel:"noopener noreferrer"},D=n("h4",{id:"_1-3-2安装pytorch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-3-2安装pytorch","aria-hidden":"true"},"#"),a(" 1.3.2安装pytorch")],-1),z={href:"https://pytorch.org/get-started/locally/",target:"_blank",rel:"noopener noreferrer"},A=n("p",null,"按照你的情况选择表格中的命令，复制到pycharm的终端中运行",-1),G=n("figure",null,[n("img",{src:g,alt:"在pycharm的终端中运行pytorch安装命令",tabindex:"0",loading:"lazy"}),n("figcaption",null,"在pycharm的终端中运行pytorch安装命令")],-1),N=n("h2",{id:"_2-下载bert-vits2库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-下载bert-vits2库","aria-hidden":"true"},"#"),a(" 2.下载Bert-Vits2库")],-1),F={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"在项目文件夹中打开终端，输入",-1),j=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"git"),a(` clone https://github.com/fishaudio/Bert-VITS2.git
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),C=n("p",null,"如果github超时，可以使用ghproxy镜像",-1),E=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"git"),a(` clone https://ghproxy.com/https://github.com/fishaudio/Bert-VITS2.git
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),P={href:"https://ghproxy.com/https://github.com/git-for-windows/git/releases/download/v2.43.0.windows.1/Git-2.43.0-64-bit.exe",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/fishaudio/Bert-VITS2",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"点击右上角的绿色按钮，选择Download ZIP",-1),R={href:"https://ghproxy.com/https://github.com/fishaudio/Bert-VITS2/archive/refs/heads/master.zip",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,[n("code",null,"下载完成后解压到项目文件夹中")],-1),O=t(`<h3 id="_2-1下载requirements-txt中的库" tabindex="-1"><a class="header-anchor" href="#_2-1下载requirements-txt中的库" aria-hidden="true">#</a> 2.1下载Requirements.txt中的库</h3><p>在pycharm的终端中输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果遇到报错，可以尝试暂时使用清华源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以将清华源设置为默认源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-安装nltk" tabindex="-1"><a class="header-anchor" href="#_2-2-安装nltk" aria-hidden="true">#</a> 2.2 安装nltk</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> nltk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开python终端</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> nltk
nltk<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_+'" alt="在python终端中下载nltk数据集" title="在python终端中下载nltk数据集" loading="lazy"> 并在打开的新窗口下载corpora中的cmudict与models中的averaged_perceptron_tagger</p><p>如果遇到打开nltk直接遇到下面报错的情况，或者在运行任何代码时报错代码中出现nltk.download(&quot;XXXXX&quot;) <img src="'+v+'" alt="遇到11004" title="遇到11004" loading="lazy"> 请将Server Index中的地址改为<code>http://www.nltk.org/nltk_data/</code></p><p>若仍然报错，<a href="assets/bertbits2asset/cmudict.zip">cmudict</a>与<a href="assets/bertbits2asset/averaged_perceptron_tagger.zip">averaged_perceptron_tagger</a>可以在这里下载</p><p>请将cmudict放入<code>C:\\Users\\你的用户名\\AppData\\Roaming\\nltk_data\\corpora\\</code>中</p><p>将averaged_perceptron_tagger放入<code>C:\\Users\\你的用户名\\AppData\\Roaming\\nltk_data\\taggers\\</code>中</p><h2 id="_3-下载模型并检查是否能正常运作" tabindex="-1"><a class="header-anchor" href="#_3-下载模型并检查是否能正常运作" aria-hidden="true">#</a> 3.下载模型并检查是否能正常运作</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如能直接连接至HuggingFace则无视这段</p></div><details class="hint-container details"><summary>非正确示范</summary><p>我跑的时候没发现能用openi镜像，就一点一点看报错，手动去huggingFace把缺少的模型文件一个个下过来，好玉玉</p></details><p>复制default_config.yml，将副本改名为config.yml</p><figure><img src="'+k+'" alt="使用openi作为镜像源" tabindex="0" loading="lazy"><figcaption>使用openi作为镜像源</figcaption></figure><p>打开config.yml,找到mirror项，将它的值从改为&quot;openi&quot;</p>',22),W={href:"https://openi.pcl.ac.cn/docs/index.html#/api/intro?id=%e8%8e%b7%e5%8f%96%e4%bb%a4%e7%89%8c",target:"_blank",rel:"noopener noreferrer"},Z=t(`<h3 id="_3-1简单检查" tabindex="-1"><a class="header-anchor" href="#_3-1简单检查" aria-hidden="true">#</a> 3.1简单检查</h3><p>运行<code>text/chinese_bert.py</code>/<code>text/japanese_bert.py</code> 若输出如下，则说明环境配置成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>……
torch.Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
torch.Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
torch.Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">65</span>, <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到以下报错请将config.py 内的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-y&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--yml_config&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&quot;config.yml&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>中的<code>default=&quot;config.yml&quot;</code>改为绝对路径</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;D:\\study\\Bert-VITS2-master<span class="token entity" title="\\t">\\t</span>ext<span class="token entity" title="\\c">\\c</span>hinese_bert.py&quot;</span>, line <span class="token number">6</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    from config <span class="token function">import</span> config
  File <span class="token string">&quot;D:\\study\\Bert-VITS2-master<span class="token entity" title="\\c">\\c</span>onfig.py&quot;</span>, line <span class="token number">243</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    config <span class="token operator">=</span> Config<span class="token punctuation">(</span>args.yml_config<span class="token punctuation">)</span>
  File <span class="token string">&quot;D:\\study\\Bert-VITS2-master<span class="token entity" title="\\c">\\c</span>onfig.py&quot;</span>, line <span class="token number">207</span>, <span class="token keyword">in</span> __init__
    with open<span class="token punctuation">(</span>file<span class="token operator">=</span>config_path, <span class="token assign-left variable">mode</span><span class="token operator">=</span><span class="token string">&quot;r&quot;</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span> as file:
FileNotFoundError: <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token function">file</span> or directory: <span class="token string">&#39;config.yml&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>作者的环境应该是linux,我在windows上运行的时候遇到了路径问题</p><p>LOCAL_PATH及config里面的相对路径引用中，使用了&#39;./&#39;返回上一级目录，但是windows中的&#39;./&#39;返回的是当前目录</p><p>建议直接将LOCAL_PATH改为绝对路径，反斜杠需要转义，每个反斜杠前面加一个反斜杠</p><p>eg:<code>&quot;./bert/deberta-v2-large-japanese-char-wwm&quot;</code>改为</p><p><code>&quot;F:\\\\Bert-VITS2\\\\Bert-VITS2\\\\bert\\\\deberta-v2-large-japanese-char-wwm&quot;</code></p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果你遇到了下面的报错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FileNotFoundError: <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token function">file</span> or directory: <span class="token string">&#39;Data/config.json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将config/config.json复制到Data文件夹中，</p><p>如果没有Data文件夹也是手动创建一个就好，<code>Data</code>文件夹的路径可以在<code>config.yml</code>中修改</p><p>或是在config.yml中将<code>config.json</code>的路径改为configs文件夹内的config.json</p></div><h2 id="_4-开始训练" tabindex="-1"><a class="header-anchor" href="#_4-开始训练" aria-hidden="true">#</a> 4.开始训练</h2><h3 id="_4-1准备数据集" tabindex="-1"><a class="header-anchor" href="#_4-1准备数据集" aria-hidden="true">#</a> 4.1准备数据集</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果使用他人数据集可以跳过4.1.1至4.1.3</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>记得先给音频文件降噪</p></div><p>首先准备音频数据集，我们需要将音频切分为5~10s的小片段，然后标注每个片段的语音内容，重采样为bert-vits要求的采样率，并进行pre_process</p>`,14),J={href:"https://www.bilibili.com/video/BV1dr4y1X7RL",target:"_blank",rel:"noopener noreferrer"},K=t(`<p>由于我只用了这个妹用whisper所以下面仅以这个为例</p><h4 id="_4-1-1-将音频细细切做臊子-切分音频" tabindex="-1"><a class="header-anchor" href="#_4-1-1-将音频细细切做臊子-切分音频" aria-hidden="true">#</a> 4.1.1 <s>将音频细细切做臊子</s>|切分音频</h4><p>运行<code>auto_DataLabeling\\slicer-gui\\slicer-gui.exe</code></p><p>点击左上角<code>Add Audio Files</code>，导入源音频文件</p><p>将输出目录设置为<code>auto_DataLabeling\\raw_audio\\</code></p><h4 id="_4-1-2-开始标注并清理标注" tabindex="-1"><a class="header-anchor" href="#_4-1-2-开始标注并清理标注" aria-hidden="true">#</a> 4.1.2 开始标注并清理标注</h4><p>根据需求运行<code>1.开始标注.bat</code>或DLC中的<code>0.带标点符号的标注.bat</code></p><p>运行<code>2.清理用于Bert_VITS2的标注.bat</code>清理标注</p><p>运行<code>auto_DataLabeling\\raw_audio\\.VITS数据集批量重命名.bat</code>自动重命名文件</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>清理标注是用于清理标注中的非中文字符，其他语言请参考源代码并使用whisper自动标注</p></div><h4 id="_4-1-3-重采样" tabindex="-1"><a class="header-anchor" href="#_4-1-3-重采样" aria-hidden="true">#</a> 4.1.3 重采样</h4><p>将音频文件重采样为44100Hz，可以使用Audacity或者ffmpeg</p><p>也可以直接运行<code>Bert-VITS2\\resample.py</code>，操作的目录参见config.yml中的<code>in_dir</code>与<code>out_dir</code></p><h4 id="_4-1-4-导入bert-vits2" tabindex="-1"><a class="header-anchor" href="#_4-1-4-导入bert-vits2" aria-hidden="true">#</a> 4.1.4 导入bert-vits2</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>别忘了改config.yml中的各个路径, 有些不好改的可以直接复制到Data文件夹里</p></div><p>将生成的<code>clean_barbara.list</code>放入<code>Bert-Vits2/Data/filelists/</code>文件夹中</p><p>改写config.yml中的<code>transcription_path</code>为<code>filelists/clean_barbara.list</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">preprocess_text</span><span class="token punctuation">:</span>
  <span class="token comment"># 原始文本文件路径，文本格式应为{wav_path}|{speaker_name}|{language}|{text}。</span>
  <span class="token key atrule">transcription_path</span><span class="token punctuation">:</span> <span class="token string">&quot;filelists/clean_barbara.list&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将切分后的音频文件放入<code>Bert-Vits2/dataset/你的数据集名称/</code>文件夹/中</p><h2 id="_5-开始训练" tabindex="-1"><a class="header-anchor" href="#_5-开始训练" aria-hidden="true">#</a> 5.开始训练</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>遇到任何找不到文件的问题都可以尝试将路径改为绝对路径</p></div><p>建议使用底模：</p><p>在config.yml中找到train_ms，将<code>use_base_model</code>改为<code>true</code>，并将num_workers改为少于cpu核心数的值</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token comment"># 底模设置</span>
  <span class="token key atrule">base</span><span class="token punctuation">:</span>
    <span class="token key atrule">use_base_model</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">repo_id</span><span class="token punctuation">:</span> <span class="token string">&quot;Stardust_minus/Bert-VITS2&quot;</span>
    <span class="token key atrule">model_image</span><span class="token punctuation">:</span> <span class="token string">&quot;Bert-VITS2_2.1-Emo底模&quot;</span> <span class="token comment"># openi网页的模型名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依次运行</p><p><code>Bert-Vits2/preprocess_text.py</code></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>若运行preprocess_text.py时遇到<code>emotional/wav2vec2-large-robust-12-ft-emotion-msp-dim/</code>找不到<code>pytorch_model.bin</code>的问题，</p><p>运行emo_gen.py,等待其下载emotion模型，下载完成后再运行preprocess_text.py</p></div><p><code>Bert-Vits2/bert_gen.py</code></p><p><code>Bert-Vits2/emo_gen.py</code></p><p>修改config.json中的&quot;train&quot;&quot;epoch&quot;为你想要的训练轮数,模型会在每一千步保存一次，保存在<code>Bert-Vits2/models/</code>文件夹中</p><p><code>Bert-Vits2/train_ms.py</code></p><h3 id="_5-1云端训练" tabindex="-1"><a class="header-anchor" href="#_5-1云端训练" aria-hidden="true">#</a> 5.1云端训练</h3><p>选择Pytorch环境，克隆项目，上传数据集，修改config.yml，linux无需修改相对路径</p><p>如果是国内的平台，使用openi镜像源，修改config.json</p><p>运行train_ms.py，等待训练完成，下载模型</p><h2 id="_6-使用webui进行推理" tabindex="-1"><a class="header-anchor" href="#_6-使用webui进行推理" aria-hidden="true">#</a> 6.使用webui进行推理</h2><p>在config.yml中按照你的修改修改模型路径与端口号等信息</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># webui webui配置</span>
<span class="token comment"># 注意， “:” 后需要加空格</span>
<span class="token key atrule">webui</span><span class="token punctuation">:</span>
  <span class="token comment"># 推理设备</span>
  <span class="token key atrule">device</span><span class="token punctuation">:</span> <span class="token string">&quot;cuda&quot;</span>
  <span class="token comment"># 模型路径</span>
  <span class="token key atrule">model</span><span class="token punctuation">:</span> <span class="token string">&quot;models/你的模型文件.pth&quot;</span>
  <span class="token comment"># 配置文件路径</span>
  <span class="token key atrule">config_path</span><span class="token punctuation">:</span> <span class="token string">&quot;config.json&quot;</span>
  <span class="token comment"># 端口号</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7860</span>
  <span class="token comment"># 是否公开部署，对外网开放</span>
  <span class="token key atrule">share</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment"># 是否开启debug模式</span>
  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment"># 语种识别库，可选langid, fastlid</span>
  <span class="token key atrule">language_identification_library</span><span class="token punctuation">:</span> <span class="token string">&quot;langid&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行<code>Bert-Vits2/webui.py</code></p><p>打开浏览器，输入<code>http://localhost:7860/</code> ，即可使用webui进行推理</p><hr><p>写完才发现逻辑好乱！！！有问题直接问我</p><p>不忙点的时候我把几个相对麻烦的地方写个脚本一次性解决吧</p><p><s>临表涕零，不知所言</s></p>`,44);function M(Q,Y){const s=c("ExternalLinkIcon"),r=c("Tabs");return d(),u("div",null,[n("p",null,[a("感谢@Stardust_减 佬的Bert-Vits项目 "),n("a",y,[a("Github仓库地址"),e(s)]),n("a",x,[a("bilibili"),e(s)])]),w,q,h(" more "),V,n("p",null,[n("a",B,[a("conda下载地址"),e(s)])]),S,n("p",null,[a("前往"),n("a",T,[a("Nvidia网站"),e(s)]),a("，注册，登录，下载对应的cuda版本")]),n("p",null,[a("参阅"),n("a",I,[a("CUDA安装详细教程"),e(s)]),a("写的很详细")]),D,n("p",null,[n("a",z,[a("pytorch官网"),e(s)])]),A,G,N,e(r,{id:"82",data:[{id:"使用Git下载"},{id:"直接下载"}]},{title0:i(({value:o,isActive:p})=>[a("使用Git下载")]),title1:i(({value:o,isActive:p})=>[a("直接下载")]),tab0:i(({value:o,isActive:p})=>[n("p",null,[n("a",F,[a("Git下载地址"),e(s)])]),L,j,C,E,n("p",null,[a("哦对Git也是在Github上下载的，所以也可能超时，可以 "),n("a",P,[a("通过Ghproxy下载Git软件"),e(s)])])]),tab1:i(({value:o,isActive:p})=>[n("p",null,[n("a",X,[a("仓库地址"),e(s)]),H]),n("p",null,[n("a",R,[a("通过Ghproxy从Github直接下载压缩包"),e(s)])]),U]),_:1}),O,n("p",null,[n("a",W,[a("访问这里获取openi_token"),e(s)]),a(" 并将其值填入openi_token中")]),Z,n("p",null,[a("在标注这一步， 我使用的是bilibili@领航者未鸟制作的"),n("a",J,[a("一键标注整合包"),e(s)])]),K])}const an=l(f,[["render",M],["__file","bert-vits2.html.vue"]]);export{an as default};
